<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\Arr;

/**
 * Class TotSub
 * @property int dSubExe
 * @property int dSubExo
 * @property int dSub5
 * @property int dSub10
 * @property int dSubISC
 * @property int dTotOpe
 * @property int dTotDesc
 * @property int dTotDescGlotem
 * @property int dTotAntItem
 * @property int dTotAnt
 * @property int dPorcDescTotal
 * @property int dDescTotal
 * @property int dAnticipo
 * @property int dRedon
 * @property int dComi
 * @property int dTotGralOpe
 * @property int dIVA5
 * @property int dIVA10
 * @property int dTotIVA
 * @property int dBaseGrav5
 * @property int dBaseGrav10
 * @property int dTBasGraIVA
 * @property int dLTotISC
 * @property int dTBasGravISC
 * @property int dTotalGs
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class TotSub extends ElectronicDocumentSectionBase {

    protected $attributes = [
        'dSubExe' => null, 'dSubExo' => null, 'dSub5' => null, 'dSub10' => null, 'dSubISC' => null,
        'dTotOpe' => null, 'dTotDesc' => null, 'dTotDescGlotem' => null, 'dTotAntItem' => null, 'dTotAnt' => null,
        'dPorcDescTotal' => null, 'dDescTotal' => null, 'dAnticipo' => null,
        'dRedon' => null, 'dComi' => null, 'dTotGralOpe' => null, 'dIVA5' => null, 'dIVA10' => null, 'dTotIVA' => null,
        'dBaseGrav5' => null, 'dBaseGrav10' => null, 'dTBasGraIVA' => null, 'dLTotISC' => null, 'dTBasGravISC' => null,
        'dTotalGs' => null, 'dTotCom' => null, 'dIVAComi' => null,
    ];

    protected $fillable = [
        'dSubExe', 'dSubExo', 'dSub5', 'dSub10', 'dSubISC', 'dTotPag', 'dTotDesc', 'dRedon', 'dComi', 'dTotGralOpe',
        'dIVA5', 'dIVA10', 'dTotIVA', 'dTBasGraIVA', 'dLTotISC', 'dTBasGravISC',
        'dTotalGs'
    ];

    public function defaults()
    {
        $this->dPorcDescTotal = 0;
        $this->dAnticipo = 0;

        return parent::defaults(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            'dSubExe'        => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dSubExo'        => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dSub5'          => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dSub10'         => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dSubISC'        => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotOpe'        => ['required', 'numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotDesc'       => ['required', 'numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotDescGlotem' => ['required', 'numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotAntItem'    => ['required', 'numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotAnt'        => ['required', 'numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dRedon'         => ['required', 'integer', 'digits_between:1,11'],
            'dTotGralOpe'    => ['required', 'numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dIVA5'          => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dIVA10'         => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotIVA'        => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dBaseGrav5'     => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dBaseGrav10'    => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTBasGraIVA'    => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dLTotISC'       => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTBasGravISC'   => ['numeric', 'ekuatia_long:' . TotSub::BASE_AMOUNT_FORMAT],
            'dTotalGs'       => ['numeric', 'ekuatia_long:1-11p0-8'],
        ]); // TODO: Change the autogenerated stub
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'dSubExe'       => 'Subtotal de venta exento',
            'dSubExo'       => 'Subtotal de venta exoneradas',
            'dSub5'         => 'Subtotal de venta con IVA incluido a la tasa 5%',
            'dSub10'        => 'Subtotal de venta con IVA incluido a la tasa 10%',
            'dSubISC'       => 'Subtotal de venta ISC',
            'dTotOpe'       => 'Total de la venta sin descuento',
            'dTotDesc'      => 'Total Descuento por ítem',
            'dTotDescGlotem'=> 'Total descuento global por ítem',
            'dTotAntItem'   => 'Total Anticipo por ítem',
            'dTotAnt'       => 'Total Anticipo global por ítem',
            'dRedon'        => 'Campo de redondeo',
            'dComi'         => 'Comisión de la operación',
            'dTotGralOpe'   => 'Total a pagar con descuentos y redondeos',
            'dIVA5'         => 'Liquidación del IVA a la tasa del 5%',
            'dIVA10'        => 'Liquidación del IVA a la tasa del 10%',
            'dTotIVA'       => 'Liquidación Total del IVA',
            'dBaseGrav5'    => 'Base Imponible de la tasa del 5%',
            'dBaseGrav10'   => 'Base Imponible de la tasa del 10%',
            'dTBasGraIVA'   => 'Total Base imponible de IVA',
            'dLTotISC'      => 'Liquidación Total del ISC',
            'dTBasGravISC'  => 'Base Imponible ISC',
            'dTotalGs'      => 'Total general de la operación en Guaraníes',
        ]); // TODO: Change the autogenerated stub
    }

    protected function validating(Validator $validator)
    {
        parent::validating($validator); // TODO: Change the autogenerated stub

        $subTotals = (object) [
            'dSubExe' => 0, 'dSubExo' => 0, 'dSub5' => 0, 'dSub10' => 0, 'dSubISC' => 0, 'dTotOpe' => 0,
            'dTotDesc' => 0, 'dTotDescGlotem' => 0, 'dTotAntItem' => 0, 'dTotAnt' => 0,
            'dIVA5' => 0, 'dIVA10' => 0, 'dBaseGrav5' => 0, 'dBaseGrav10' => 0,
            'dLTotISC' => 0, 'dTBasGravISC' => 0,
        ];
        $this->root->gDtipDE->gCamItem->each(function(CamItem $row) use (&$subTotals) {
            if (in_array($row->gCamIVA->iAfecIVA, [3, 4])) $subTotals->dSubExe += (($row->gCamIVA->iAfecIVA !== 4) ? $row->gValorItem->gValorRestaItem->dTotOpeItem : $row->gCamIVA->dBasExe);
            if ($row->gCamIVA->iAfecIVA == 2) $subTotals->dSubExo += $row->gValorItem->gValorRestaItem->dTotOpeItem;
            if ($row->gCamIVA->dTasaIVA == 5) $subTotals->dSub5 += ($row->gCamIVA->iAfecIVA !== 4) ? $row->gValorItem->gValorRestaItem->dTotOpeItem : ($row->gCamIVA->dBasGravIVA + $row->gCamIVA->dLiqIVAItem);
            if ($row->gCamIVA->dTasaIVA == 10) $subTotals->dSub10 += ($row->gCamIVA->iAfecIVA !== 4) ? $row->gValorItem->gValorRestaItem->dTotOpeItem : ($row->gCamIVA->dBasGravIVA + $row->gCamIVA->dLiqIVAItem);
            if (in_array($this->root->gDatGralOpe->gOpeCom->iTImp, [2, 3, 4, 5])) $subTotals->dSubISC += $row->gValorItem->gValorRestaItem->dTotOpeItem;
            $subTotals->dTotDesc += $row->dCantProSer * $row->gValorItem->gValorRestaItem->dDescItem;
            if($row->gCamIVA->dTasaIVA == 5) $subTotals->dIVA5 += $row->gCamIVA->dLiqIVAItem;
            if($row->gCamIVA->dTasaIVA == 10) $subTotals->dIVA10 += $row->gCamIVA->dLiqIVAItem;
            if($row->gCamIVA->dTasaIVA == 5) $subTotals->dBaseGrav5 += $row->gCamIVA->dBasGravIVA;
            if($row->gCamIVA->dTasaIVA == 10) $subTotals->dBaseGrav10 += $row->gCamIVA->dBasGravIVA;
            $subTotals->dLTotISC += $row->gCamISC->dlISCItem;
            $subTotals->dTBasGravISC += $row->gCamISC->dBaseGravISCItem;
        });
        if(in_array($this->root->gTimb->iTiDE, [4])) {
            $subTotals->dTotOpe = $this->root->gDtipDE->gCamItem->sum(function(CamItem $item) {
                return $item->gValorItem->gValorRestaItem->dTotOpeItem;
            });
        } else {
            if ($this->root->gDatGralOpe->gOpeCom->iTImp === 1) {
                $subTotals->dTotOpe = $this->dSubExe + $this->dSubExo + $this->dSub5 + $this->dSub10;
            } elseif(in_array($this->root->gDatGralOpe->gOpeCom->iTImp, [2, 3, 4, 5])) {
                $subTotals->dTotOpe = $this->dSubISC;
            }
        }
        $subTotals->dTotGralOpe = $this->dTotOpe - $this->dRedon + $this->dComi;
        $subTotals->dTotIVA = $this->dIVA5 + $this->dIVA10;
        $subTotals->dTBasGraIVA = $this->dBaseGrav5 + $this->dBaseGrav10;
        foreach ((array) $subTotals as $field => $subTotal) {
            if (! rounded_equal($this->{$field}, $subTotal)) $validator->getMessageBag()->add($field, 'Monto total invalido, verifique la documentacion.');
        }
    }

    public function getDSubExeAttribute()
    {
        $value = null;
        $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
            if (! in_array($item->gCamIVA->iAfecIVA, [3, 4])) return;
            $value += ($item->gCamIVA->iAfecIVA !== 4) ? $item->gValorItem->gValorRestaItem->dTotOpeItem : ($item->gCamIVA->dBasExe);
        });

        return (! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getdSubExoAttribute()
    {
        $value = null;
        $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
            if ($item->gCamIVA->iAfecIVA != 2) return;
            $value += $item->gValorItem->gValorRestaItem->dTotOpeItem;
        });
    }

    public function getDPorcDescTotalAttribute()
    {
        return ( isset($this->attributes['dPorcDescTotal'])) ? ekuatia_number_format($this->attributes['dPorcDescTotal'], 2) : null;
    }

    public function getDDescTotalAttribute()
    {
        return ekuatia_number_format($this->dTotDesc + $this->dTotDescGlotem, 8, 1);
    }
    
    public function getDSub5Attribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) { // Tipo IVA
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                if ($item->gCamIVA->dTasaIVA != 5) return;
                $value += ($item->gCamIVA->iAfecIVA !== 4) ? $item->gValorItem->gValorRestaItem->dTotOpeItem : ($item->gCamIVA->dBasGravIVA + $item->gCamIVA->dLiqIVAItem);
            });
        }

        return (! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDSub10Attribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) { // Tipo IVA
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                if ($item->gCamIVA->dTasaIVA != 10) return;
                $value += ($item->gCamIVA->iAfecIVA !== 4) ? $item->gValorItem->gValorRestaItem->dTotOpeItem : ($item->gCamIVA->dBasGravIVA + $item->gCamIVA->dLiqIVAItem);
            });
        }

        return (! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDSubISCAttribute()
    {
        $value = null;
        if ( in_array($this->root->gDatGralOpe->gOpeCom->iTImp, [2, 3, 4, 5])) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                $value += $item->gValorItem->gValorRestaItem->dTotOpeItem;
            });
        }

        return (! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDTotOpeAttribute()
    {
        $value = null;
        if(in_array($this->root->gTimb->iTiDE, [4])) {
            $value = $this->root->gDtipDE->gCamItem->sum(function(CamItem $item) {
                return $item->gValorItem->gValorRestaItem->dTotOpeItem;
            });
        } else {
            if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) {
                $value = ($this->dSubExe + $this->dSubExo + $this->dSub5 + $this->dSub10);
            } elseif(in_array($this->root->gDatGralOpe->gOpeCom->iTImp, [2, 3, 4, 5])) {
                $value = $this->dSubISC;
            }
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDTotDescAttribute()
    {
        if($value = Arr::get($this->attributes, 'dTotDesc')) return ekuatia_number_format($value, 8);

        $value = 0;
        $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
            $value += ($item->dCantProSer * $item->gValorItem->gValorRestaItem->dDescItem);
        });

        return ekuatia_number_format($value, 8);
    }

    public function getDTotDescGlotemAttribute() {
        return ekuatia_number_format(0, 8);
    }

    public function getDTotAntItemAttribute() {
        return ekuatia_number_format(0, 8);
    }

    public function getDTotAntAttribute() {
        return ekuatia_number_format(0, 8);
    }

    public function getDRedonAttribute()
    {
        $value = Arr::get($this->attributes, 'dRedon');

        return (is_null($value)) ? $value : ekuatia_number_format($value, 4);
    }

    public function getDComiAttribute()
    {
        $value = Arr::get($this->attributes, 'dComi');

        return (is_null($value)) ? $value : ekuatia_number_format($value, 4);
    }

    public function getDTotGralOpeAttribute()
    {
        $value = Arr::get($this->attributes, 'dTotGralOpe');

        return (! is_null($value)) ? ekuatia_number_format($value, 8) : ekuatia_number_format($this->dTotOpe - $this->dRedon + $this->dComi, 8);
    }

    public function getDIVA5Attribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                if ($item->gCamIVA->dTasaIVA != 5) return;
                $value += $item->gCamIVA->dLiqIVAItem;
            });
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDIVA10Attribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                if ($item->gCamIVA->dTasaIVA != 10) return;
                $value += $item->gCamIVA->dLiqIVAItem;
            });
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDTotIVAAttribute()
    {
        return ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) ? ekuatia_number_format(($this->dIVA5 + $this->dIVA10), 8) : null;
    }

    public function getDBaseGrav5Attribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                if ($item->gCamIVA->dTasaIVA != 5) return;
                $value += $item->gCamIVA->dBasGravIVA;
            });
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDBaseGrav10Attribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                if ($item->gCamIVA->dTasaIVA != 10) return;
                $value += $item->gCamIVA->dBasGravIVA;
            });
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDTBasGraIVAAttribute()
    {
        return ($this->root->gDatGralOpe->gOpeCom->iTImp == 1) ? ekuatia_number_format(($this->dBaseGrav5 + $this->dBaseGrav10), 8) : null;
    }

    public function getDLTotISCAttribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp != 1) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                $value += $item->gCamISC->dlISCItem;
            });
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDTBasGravISCAttribute()
    {
        $value = null;
        if ($this->root->gDatGralOpe->gOpeCom->iTImp != 1) {
            $this->root->gDtipDE->gCamItem->each(function(CamItem $item) use (&$value) {
                $value += $item->gCamISC->dBaseGravISCItem;
            });
        }

        return ( ! is_null($value)) ? ekuatia_number_format($value, 8) : null;
    }

    public function getDTotalGsAttribute()
    {
        $opeCom = $this->root()->gDatGralOpe->gOpeCom;
        if ($opeCom->cMoneOpe === "PYG" and $opeCom->dCondTiCam !== 1) return null;

        return ekuatia_number_format(($this->dTotGralOpe * $opeCom->dTiCam), 8);
    }

    public function toArray()
    {
        $attributes = parent::toArray();
        if ($this->root->gDatGralOpe->gOpeCom->iTImp != 1) {
            $attributes = Arr::except($attributes, [
                'dSub5', 'dSub10', 'dSubISC', 'dIVA5', 'dIVA10', 'dTotIVA', 'dBaseGrav5', 'dBaseGrav10',
                'dTBasGraIVA', 'dLTotISC', 'dTBasGravISC',
            ]);
        }

        return $attributes;
    }
}