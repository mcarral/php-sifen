<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\Arr;
use Illuminate\Validation\Rule;

/**
 * @property string dDirLocEnt
 * @property integer dNumCasEnt
 * @property integer cDepEnt
 * @property string dDesDepEnt
 * @property integer cCiuEnt
 * @property string dDesCiuEnt
 * @property string dTelEnt
 * Class CamEnt
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class CamEnt extends ElectronicDocumentSectionBase {
    protected $attributes = [
        'dDirLocEnt' => null, 'dNumCasEnt' => null, 'dComp1Ent' => null, 'dComp2Ent' => null, 'cDepEnt' => null,
        'dDesDepEnt' => null, 'cDisEnt' => null, 'dDesDisEnt' => null, 'cCiuEnt' => null, 'dDesCiuEnt' => null,
        'dTelEnt' => null,
    ];

    public function defaults()
    {
        $this->dNumCasEnt = 0;

        return parent::defaults(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            'dDirLocEnt'     => ['required', 'string', 'between:1,255'],
            'dNumCasEnt'     => ['required', 'numeric', 'digits_between:1,6'],
            'cDepEnt'        => ['required', 'integer', 'digits_between:1,2', Rule::in(array_keys($this->ekuatia->config('encodings.departments')))],
            'dDesDepEnt'     => ['required', 'string', 'between:6,16', Rule::in(array_column($this->ekuatia->config('encodings.departments'), 'name'))],
            'cCiuEnt'        => ['required', 'integer', 'digits_between:1,5', Rule::in(array_keys($this->ekuatia->config('encodings.locations')))],
            'dDesCiuEnt'     => ['required', 'string', 'between:1,30', Rule::in(array_column($this->ekuatia->config('encodings.locations'), 'name'))],
            'dTelEnt'        => ['string', 'between:6,15'],
        ]);
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'dDirLocEnt'    => 'Dirección del local de la entrega',
            'dNumCasEnt'    => 'Número de casa de la entrega',
            'cDepEnt'       => 'Código del departamento del local de la entrega',
            'dDesDepEnt'    => 'Descripción del departamento del local de la entrega',
            'cCiuEnt'       => 'Código de la ciudad del local de la entrega',
            'dDesCiuEnt'    => 'Descripción de ciudad del local de la entrega',
            'dTelEnt'       => 'Teléfono de contacto del local de la entrega',
        ]); // TODO: Change the autogenerated stub
    }

    public function setCDepEntAttribute($value)
    {
        if ( ! is_null($value)) $value = ekuatia()->equivalence('Province', $value, $value)->code_converted;
        $this->attributes['cDepEnt'] = $value ?: '';
    }

    public function getCDepEntAttribute()
    {
        $value = Arr::get($this->attributes, 'cDepEnt');
        if (! is_null($value)) return $value;

        $city = $this->ekuatia->config('encodings.locations.' . $this->cCiuEnt);
        return ( is_null($city)) ? $city : $city['department'];
    }

    public function getDDesDepEntAttribute()
    {
        if ( isset($this->attributes['dDesDepEnt'])) return $this->attributes['dDesDepEnt'];

        return ( ! is_null($this->cDepEnt)) ? Arr::get($this->ekuatia->config('encodings.departments'), $this->cDepEnt . ".name") : '';
    }

    public function setCCiuEntAttribute($value)
    {
        if ( ! is_null($value)) $value = ekuatia()->equivalence('City', $value, $value)->code_converted;
        $this->attributes['cCiuEnt'] = $value;
    }

    public function getDDesCiuEntAttribute()
    {
        if ( isset($this->attributes['dDesCiuEnt'])) return $this->attributes['dDesCiuEnt'];

        return ( ! is_null($this->cCiuEnt)) ? Arr::get($this->ekuatia->config('encodings.locations'), $this->cCiuEnt . ".name") : null;
    }

    public function setDTelEntAttribute($value)
    {
        $this->attributes['dTelEnt'] = $this->extractPhoneNumber($value);
    }
}