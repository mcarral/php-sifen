<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\Arr;
use Illuminate\Validation\Rule;

/**
 * @property integer iMotEmiNR
 * @property string dDesMotEmiNR
 * @property integer iRespEmiNR
 * @property string dDesRespEmiNR
 * @property integer dKmR
 * @property string dFecEm
 * Class CamNRE
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class CamNRE extends ElectronicDocumentSectionBase {

    protected $attributes = ['iMotEmiNR' => null, 'dDesMotEmiNR' => null, 'iRespEmiNR' => null, 'dDesRespEmiNR' => null,
                             'dKmR' => null, 'dFecEm' => null, ];
    protected $motEmission = [
        1 => 'Traslado por ventas', 2 => 'Traslado por consignación', 3 => 'Exportación', 4 => 'Traslado por compra',
        5 => 'Importación', 6 => 'Traslado por devolución', 7 => 'Traslado entre locales de la empresa',
        8 => 'Traslado de bienes por transformación', 9 => 'Traslado de bienes por reparación', 10 => 'Traslado por emisor móvil',
        11 => 'Exhibición o Demostración', 12 => 'Participación en ferias', 13 => 'Traslado de encomienda', 14 => 'Decomiso',
        99 => 'Unknown',
    ];

    protected $respEmi = [
        1 => 'Emisor de la factura', 2 => 'Poseedor de la factura y bienes', 3 => 'Empresa transportista',
        4 => 'Despachante de Aduanas', 5 => 'Agente de transporte o intermediario'
    ];

    public function rules()
    {
        return array_merge(parent::rules(), [
            'iMotEmiNR'       => ['required', 'integer', 'digits_between:1,2', Rule::in(array_keys($this->motEmission))],
            'dDesMotEmiNR'    => ['required', 'string', 'between:5,60'],
            'iRespEmiNR'      => ['required', 'integer', 'digits_between:1,1', Rule::in(array_keys($this->respEmi))],
            'dDesRespEmiNR'   => ['required', 'string', 'between:20,36', Rule::in($this->respEmi)],
            'dKmR'            => ['required', 'numeric', 'digits_between:1,5'],
            'dFecEm'          => ['required', 'date_format:' . CamNRE::DATE_FORMAT],
        ]);
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'iMotEmiNR'     => 'Motivo de emisión',
            'dDesMotEmiNR'  => 'Descripción del motivo de emisión',
            'iRespEmiNR'    => 'Responsable de la emisión de la Nota Remisión Electrónica',
            'dDesRespEmiNR' => 'Descripción del responsable de la emisión de la Nota de Remisión Electrónica',
            'dKmR'          => 'Kilómetros estimados de recorrido',
            'dFecEm'        => 'Fecha futura de emisión de la factura',
        ]); // TODO: Change the autogenerated stub
    }

    /*protected function validating(Validator $validator)
    {
        if ($this->root->gDatGralOpe->gDatRec->iTiOpe === 3) {
            if (! array_key_exists($this->cUniMed, $this->ekuatia->config('encodings.measurement_unities'))) {
                $validator->getMessageBag()->add('cUniMed', 'cUniMed (' . $this->cUniMed . ') no se encuentra en la tabla codificada de unidad de medida.');
            }
        }
    }*/

    public function getDDesMotEmiNRAttribute()
    {
        if ( isset($this->attributes['dDesMotEmiNR'])) return $this->attributes['dDesMotEmiNR'];

        return Arr::get($this->motEmission, $this->iMotEmiNR, 'Unknown');
    }

    public function getDDesRespEmiNRAttribute()
    {
        if ( isset($this->attributes['dDesRespEmiNR'])) return $this->attributes['dDesRespEmiNR'];

        return Arr::get($this->respEmi, $this->iRespEmiNR, 'Unknown');
    }

    public function getDFecEmAttribute()
    {
        return (isset($this->attributes['dFecEm'])) ? $this->dateToString($this->attributes['dFecEm']) : null;
    }

}
