<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Carbon\Carbon;
use Illuminate\Support\Arr;

/**
 * Class DE
 * @property string dIDE
 * @property string dDVId
 * @property string dFecFirma
 * @property string dSisFact
 * @property-read OpeDE gOpeDE
 * @property-read Timb gTimb
 * @property-read DatGralOpe gDatGralOpe
 * @property-read DtipDE gDtipDE
 * @property-read TotSub gTotSub
 * @property-read CamDEAsoc gCamDEAsoc
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class DE extends ElectronicDocumentSectionBase {

    protected $attributes = [
        'dIDE' => null, 'dDVId' => null, 'dFecFirma' => null, 'dSisFact' => null, 'gOpeDE' => null, 'gTimb' => null,
        'gDatGralOpe' => null, 'gDtipDE' => null, 'gTotSub' => null, 'gCamDEAsoc' => null,
    ];

    public function defaults()
    {
        $this->dDVId = null;
        $this->dSisFact = 1;

        return parent::defaults();
    }

    public function sectionName()
    {
        return 'DE';
    }

    public function rules()
    {
        return [
            'dDVId'      => 'required|integer',                      // |size:1 // Digito verificador del identificador del DE
            'dFecFirma'  => 'required|string',                       // Fecha de la firma digital
            'gOpeDE'     => 'required',                              // Campos de la operaciÃ³n de DE
            'gTimb'      => 'required',                              // Datos del timbrado
            'gTotSub'    => 'required_unless:gTimbiTiDE,5,7',        // Campos de subtotales y totales
        ];
    }

    protected function validateAdditionalData()
    {
        return array_merge(parent::validateAdditionalData(), [
            'gTimbiTiDE' => $this->gTimb->iTiDE
        ]); // TODO: Change the autogenerated stub
    }

    protected function cdc()
    {
        $cdc = implode('', [
            str_pad($this->gTimb->iTiDE, 2, '0', STR_PAD_LEFT),
            str_pad($this->gDatGralOpe->gEmis->dRucEm, 8, '0', STR_PAD_LEFT) .
            $this->gDatGralOpe->gEmis->dDVEmi,
            $this->gTimb->dEst,
            $this->gTimb->dPunExp,
            $this->gTimb->dNumDoc,
            $this->gDatGralOpe->gEmis->iTipCont,
            ($this->gDatGralOpe->getOriginal('dFeEmiDE') or $this->gDatGralOpe->dFeEmiDE) ? // get original date object or load
                $this->gDatGralOpe->getOriginal('dFeEmiDE')->format('Ymd') :
                '',
            $this->gOpeDE->iTipEmi,
            $this->gOpeDE->dCodSeg,
        ]);
        $this->dDVId = make_check_digit($cdc);

        return $cdc . $this->dDVId;
    }

    protected function setDFecFirmaAttribute($value)
    {
        $this->attributes['dFecFirma'] = ($value) ? $this->ekuatia->dateFormat($value) : $value;
    }

    protected function fillCDC($cdc)
    {
        $this->dDVId = substr($cdc, -1);
        $this->gOpeDE->dCodSeg = substr($cdc, mb_strlen($cdc)-10, 9);

        return $cdc;
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $this->attributes['dIDE'] = ( isset($this->attributes['dIDE'])) ? $this->fillCDC($this->attributes['dIDE']) : $this->cdc();
        $this->dFecFirma = Carbon::now();

        $attributes = array_merge(parent::toArray(), [
            'gOpeDE'    => $this->gOpeDE,
            'gTimb'     => $this->gTimb,
            'gDtipDE'   => $this->gDtipDE,
            'gTotSub'   => $this->gTotSub,
        ]);
        if ($this->gTimb->iTiDE === 7) $attributes = Arr::except($attributes, ['gTotSub']);
        if (! in_array($this->gTimb->iTiDE, [4, 5, 6, 8]))  $attributes = Arr::except($attributes, ['gCamDEAsoc']);

        return Arr::except($attributes, ['dIDE']);
    }
}