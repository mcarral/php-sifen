<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Mcarral\Sifen\Entities\EkuatiaSetting;

/**
 * Class CamFuFD
 * @property int dCarQR
 * @property string dInfAdic
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class CamFuFD extends ElectronicDocumentSectionBase {

    protected $attributes = ['dCarQR' => null, 'dInfAdic' => null];

    protected $fillable = ['dCarQR', 'dInfAdic'];

    protected $signature;

    public function __construct(Root $root, ElectronicDocumentSectionBase $parent = null, $signature = null)
    {
        parent::__construct($root, $parent);

        $this->signature = $signature;
    }

    /**
     * @param $objDSig
     * @return $this
     */
    public function setSignature($objDSig)
    {
        $this->signature = $objDSig;

        return $this;
    }

    public function signature()
    {
        return $this->signature;
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            'dCarQR'    => ['required', 'string', 'between:100,600'],   // Cadena de caracteres (string) correspondiente al código QR impreso en la Representación Gráfica
            'dInfAdic'  => ['string'],                                  // Información adicional de interés para el emisor
        ]); // TODO: Change the autogenerated stub
    }

    protected function getSignDigestValue()
    {
        $info = $this->signature()->getElementsByTagName('SignedInfo');
        if (! count($info)) return '';
        $ref = $info[0]->getElementsByTagName('Reference');
        if (! count($ref)) return '';
        $dig = $ref[0]->getElementsByTagName('DigestValue');
        if (! count($dig)) return '';

        return (string) $dig[0]->nodeValue;
    }

    protected function parameters()
    {
        $params = [
            'nVersion'          => $this->ekuatia->config('qr.version'),
            'Id'                => $this->root->gDE->dIDE,
            'dFeEmiDE'          => bin2hex($this->root->gDE->gDatGralOpe->dFeEmiDE),
            'dRucRec'           => $this->root->gDatGralOpe->gDatRec->dRucRec,
            'dNumIDRec'         => $this->root->gDatGralOpe->gDatRec->dNumIDRec,
            'dTotGralOpe'       => $this->root->gTotSub->dTotGralOpe,
            'dTotIVA'           => $this->root->gTotSub->dTotIVA,
            'cItems'            => $this->root->gDtipDE->gCamItem->count(),
            'DigestValue'       => bin2hex($this->getSignDigestValue()),
            'IdCSC'             => str_pad((new EkuatiaSetting())->find()->QrIdApiKey, 4, '0', STR_PAD_LEFT),
        ];
        if( ! is_null($this->root->gDatGralOpe->gDatRec->dNumIDRec)) {
            unset($params['dRucRec']);
        } else {
            unset($params['dNumIDRec']);
        }

        // return JWT::encode($token, file_get_contents($this->ekuatia->config('cert.private')), 'RS256');
        // return JWT::encode($token, hash('sha256', '123456'), 'HS256');
        return http_build_query($params);
    }

    public function getDCarQRAttribute()
    {
        if ($this->attributes['dCarQR']) return $this->attributes['dCarQR'];
        $query = $this->parameters();

        return ($this->attributes['dCarQR'] = $this->ekuatia->config('qr.url') . '?' . $query . '&cHashQR=' . hash('sha256',
            $query . (new EkuatiaSetting())->find()->QrApiKey
        ));
    }

    /**
     * @return string
     */
    public function getQR()
    {
        return $this->dCarQR;
    }

    public function toXml()
    {
        return parent::toXml(); // TODO: Change the autogenerated stub
    }

}