<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;
use Mcarral\Sifen\Entities\EkuatiaSetting;

/**
 * Class Emis
 * @property string dRucEm
 * @property-read int dDVEmi
 * @property int iTipCont
 * @property int cTipReg
 * @property string dDesTreg
 * @property string dNomEmi
 * @property string dNomFanEmi
 * @property string dDirEmi
 * @property int dNumCas
 * @property string dCompDir1
 * @property string dCompDir2
 * @property int cCiuEmi
 * @property string dDesCiuEmi
 * @property int cDisEmi
 * @property string dDesDisEmi
 * @property int cDepEmi
 * @property string dDesDepEmi
 * @property int dTelEmi
 * @property string dEmailE
 * @property string dDenSuc
 * @property SectionCollection|ActEco[] gActEco
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class Emis extends ElectronicDocumentSectionBase {

    protected $attributes = [
        'dRucEm' => null, 'dDVEmi' => null, 'iTipCont' => null, 'cTipReg' => null,
        'dDesTreg' => null, 'dNomEmi' => null, 'dNomFanEmi' => null, 'dDirEmi' => null, 'dNumCas' => null, 'dCompDir1' => null,
        'dCompDir2' => null, 'cDepEmi' => null, 'dDesDepEmi' => null, 'cDisEmi' => null, 'dDesDisEmi' => null, 'cCiuEmi' => null,
        'dDesCiuEmi' => null, 'dTelEmi' => null, 'dEmailE' => null, 'dDenSuc' => null, 'gActEco' => null,
    ];

    protected $fillable = [
        'dRucEm', 'iTipCont', 'cTipReg', 'dDesTreg', 'dNomEmi', 'dNomFanEmi', 'dDirEmi',
        'dNumCas', 'dCompDir1', 'dCompDir2', 'cCiuEmi', 'dDesCiuEmi', 'cDisEmi', 'dDesDisEmi', 'cDepEmi', 'dDesDepEmi',
        'dTelEmi', 'dEmailE', 'dDenSuc'
    ];

    const PERSON_PHYSICAL = 1;
    const PERSON_LEGAL = 2;
    protected $iTipContOptions = [Emis::PERSON_PHYSICAL => 'Persona Física', Emis::PERSON_LEGAL => 'Persona Jurídica'];

    public function defaults()
    {
        $this->dNumCas = 0;
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            'dRucEm'        => ['required', 'string', 'between:3,8', 'regex:/[1-9][0-9]*[0-9A-D]?/i'],
            'dDVEmi'        => ['required', 'integer', 'digits:1'],
            'iTipCont'      => ['required', 'integer', 'digits:1', Rule::in(array_keys($this->iTipContOptions))],
            'cTipReg'       => ['integer', 'digits_between:1,2', Rule::in(array_keys($this->ekuatia->config('encodings.regime-type')))],
            'dNomEmi'       => ['required', 'string', 'between:4,255'],
            'dNomFanEmi'    => ['string', 'between:4,255'],
            'dDirEmi'       => ['required', 'string', 'between:1,255'],
            'dNumCas'       => ['required', 'integer', 'digits_between:1,6'],
            'dCompDir1'     => ['string', 'between:1,255'],
            'dCompDir2'     => ['string', 'between:1,255'],
            'cDepEmi'       => ['required', 'integer', 'digits_between:1,2', Rule::in(array_keys($this->ekuatia->config('encodings.departments')))],
            'dDesDepEmi'    => ['required', 'string', 'between:6,16', Rule::in(array_column($this->ekuatia->config('encodings.departments'), 'name'))],
            'cDisEmi'       => ['integer', 'digits_between:1,4', Rule::in(array_keys($this->ekuatia->config('encodings.districts')))],
            'dDesDisEmi'    => ['string', 'between:1,30', Rule::in(array_column($this->ekuatia->config('encodings.districts'), 'name'))],
            'cCiuEmi'       => ['required', 'integer', 'digits_between:1,5', Rule::in(array_keys($this->ekuatia->config('encodings.locations')))],
            'dDesCiuEmi'    => ['required', 'string', 'between:1,30', Rule::in(array_column($this->ekuatia->config('encodings.locations'), 'name'))],
            'dTelEmi'       => ['required', 'numeric', 'digits_between:6,15', 'regex:/\d{6,15}/i'],
            'dEmailE'       => ['required', 'string', 'between:3,80', 'regex:/([0-9a-zA-Z#$%]([-.\w]*[0-9a-zA-Z#$%\'\\.\\-_])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})/i'],
            'dDenSuc'       => ['string', 'between:1,30'],
            'gActEco'       => ['required'],
        ]); // TODO: Change the autogenerated stub
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'dRucEm'        => 'RUC del contribuyente emisor',
            'dDVEmi'        => 'Dígito verificador del RUC del contribuyente emisor',
            'iTipCont'      => 'Tipo de contribuyente',
            'cTipReg'       => 'Tipo de régimen',
            'dNomEmi'       => 'Nombre o razón social del emisor del DE',
            'dNomFanEmi'    => 'Nombre de fantasía',
            'dDirEmi'       => 'Dirección del local donde se emite el DE',
            'dNumCas'       => 'Número de casa',
            'dCompDir1'     => 'Complemento de dirección 1',
            'dCompDir2'     => 'Complemento de dirección 2',
            'cDepEmi'       => 'Código del departamento de emisión',
            'dDesDepEmi'    => 'Descripción del departamento de emisión',
            'cDisEmi'       => 'Código del distrito de emisión',
            'dDesDisEmi'    => 'Descripción del distrito de emisión',
            'cCiuEmi'       => 'Código de la ciudad de emisión',
            'dDesCiuEmi'    => 'Descripción de la ciudad de emisión',
            'dTelEmi'       => 'Teléfono local de emisión de DE',
            'dEmailE'       => 'Correo electrónico del emisor',
            'dDenSuc'       => 'Denominación comercial de la sucursal',
            'gActEco'       => 'Grupo de actividad económica del emisor',
        ]); // TODO: Change the autogenerated stub
    }

    public function setDRucEmAttribute($value)
    {
        $this->attributes['dRucEm'] = $value;
        $this->dDVEmi = null;
        if ( Str::contains($value, '-')) {
            $values = explode('-', $value);
            $this->attributes['dRucEm'] = implode('-', array_slice($values, 0, count($values)-1));
            $this->dDVEmi = Arr::last($values);
        }
        // if ( is_null($this->dDVEmi)) $this->dDVEmi = // function calc digito verificador ruc
        // if (strlen($this->attributes['dRucEm']) === 7) $this->attributes['dRucEm'] = '8' . $this->attributes['dRucEm'];
    }

    public function getDDesContAttribute()
    {
        if ( isset($this->attributes['dDesCont'])) return $this->attributes['dDesCont'];

        return ( ! is_null($this->iTipCont)) ? Arr::get($this->iTipContOptions, $this->iTipCont) : null;
    }

    public function getDDesTregAttribute()
    {
        if ( isset($this->attributes['dDesTreg'])) return $this->attributes['dDesTreg'];

        return ( ! is_null($this->cTipReg)) ? Arr::get($this->ekuatia->config('encodings.regime-type'), $this->iTipCont) : null;
    }

    public function getDNomEmiAttribute()
    {
        if ($this->ekuatia->env() === 2) return "DE generado en ambiente de prueba - sin valor comercial ni fiscal";

        return Arr::get($this->attributes, 'dNomEmi', '');
    }

    public function setCCiuEmiAttribute($value)
    {
        if ( ! is_null($value)) $value = ekuatia()->equivalence('City', $value, $value)->code_converted;
        $this->attributes['cCiuEmi'] = $value;
    }

    public function getDDesCiuEmiAttribute()
    {
        if ( isset($this->attributes['dDesCiuEmi'])) return $this->attributes['dDesCiuEmi'];

        return ( ! is_null($this->cCiuEmi)) ? Arr::get($this->ekuatia->config('encodings.locations'), $this->cCiuEmi . ".name") : null;
    }

    public function setCDisEmiAttribute($value)
    {
        if ( ! is_null($value)) $value = ekuatia()->equivalence('District', $value, $value)->code_converted;
        $this->attributes['cDisEmi'] = $value;
    }

    public function getCDisEmiAttribute()
    {
        $value = Arr::get($this->attributes, 'cDisEmi');
        if (! is_null($value)) return $value;

        $city = $this->ekuatia->config('encodings.locations.' . $this->cCiuEmi);
        return ( is_null($city)) ? $city : $city['district'];
    }

    public function getDDesDisEmiAttribute()
    {
        if ( isset($this->attributes['dDesDisEmi'])) return $this->attributes['dDesDisEmi'];

        return ( ! is_null($this->cDisEmi)) ? Arr::get($this->ekuatia->config('encodings.districts'), $this->cDisEmi . '.name') : null;
    }

    public function setCDepEmiAttribute($value)
    {
        if ( ! is_null($value)) $value = ekuatia()->equivalence('Province', $value, $value)->code_converted;
        $this->attributes['cDepEmi'] = $value ?: '';
    }

    public function getCDepEmiAttribute()
    {
        $value = Arr::get($this->attributes, 'cDepEmi');
        if (! is_null($value)) return $value;

        $city = $this->ekuatia->config('encodings.locations.' . $this->cCiuEmi);
        return ( is_null($city)) ? $city : $city['department'];
    }

    public function getDDesDepEmiAttribute()
    {
        if ( isset($this->attributes['dDesDepEmi'])) return $this->attributes['dDesDepEmi'];

        return ( ! is_null($this->cDepEmi)) ? Arr::get($this->ekuatia->config('encodings.departments'), $this->cDepEmi . ".name") : '';
    }

    public function setDTelEmiAttribute($value)
    {
        $this->attributes['dTelEmi'] = $this->extractPhoneNumber($value);
    }

    public function getDEmailEAttribute()
    {
        return !empty($this->attributes['dEmailE']) ? $this->attributes['dEmailE'] : '';
    }

    public function getDDirEmiAttribute()
    {
        return !empty($this->attributes['dDirEmi']) ? $this->attributes['dDirEmi'] : '';
    }

    public function setDDenSucAttribute($value)
    {
        $value = substr($value, 0, 30);
        $this->attributes['dDenSuc'] = $value;

        return $value;
    }

    public function toArray()
    {
        if ( empty($this->attributes['gActEco']) and !$this->gActEco->count()) {
            array_map(function($v) {
                $values = explode(':', $v);
                $actEco = $this->gActEco->pushNewInstance();
                $actEco->cActEco = $values[0];
                $actEco->dDesActEco = implode(':', array_slice($values, 1, count($values)));
            }, explode('|', (new EkuatiaSetting())->find()->Activities));
        }

        return parent::toArray(); // TODO: Change the autogenerated stub
    }

}
