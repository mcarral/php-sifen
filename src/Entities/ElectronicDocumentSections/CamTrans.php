<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;


/**
 * @property integer iNatTrans
 * @property string dNomTrans
 * @property string dRucTrans
 * @property string dDVTrans
 * @property integer iTipIDTrans
 * @property string dNumIDTrans
 * @property string cNacTrans
 * Class CamTrans
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class CamTrans extends ElectronicDocumentSectionBase {
    protected $attributes = [
        'iNatTrans' => null, 'dNomTrans' => null, 'dRucTrans' => null, 'dDVTrans' => null, 'iTipIDTrans' => null,
        'dNumIDTrans' => null, 'cNacTrans' => null, 'dDesNacTrans' => null, 'dNumIDChof' => null, 'dNomChof' => null,
        'dDomFisc' => null, 'dDirChof' => null,
    ];

    protected $tipIdTrans = [1 => 'Cédula paraguaya', 2 => 'Pasaporte', 3 => 'Cédula extranjera', 4 => 'Carnet de residencia'];

    public function rules()
    {
        return array_merge(parent::rules(), [
            'iNatTrans'      => ['required', 'integer', Rule::in([1, 2])],
            'dNomTrans'      => ['required', 'string', 'between:4,60'],
            'dRucTrans'      => ['required_if:iNatTrans,1', 'string', 'between:3,8', 'regex:/[1-9][0-9]*[0-9A-D]?/i'],
            'dDVTrans'       => ['required_with:dRucTrans', 'integer', 'digits:1'],
            'iTipIDTrans'    => ['required_if:iNatTrans,2', 'integer', 'digits:1', Rule::in(array_keys($this->tipIdTrans))],
            'dDTipIDTrans'   => ['required_with:iTipIDTrans', 'string', 'between:9,20', Rule::in(array_values($this->tipIdTrans))],
            'dNumIDTrans'    => ['required_with:iTipIDTrans', 'string', 'between:1,20'],
            'dNumIDChof'     => ['required', 'string', 'between:1,20'],
            'dNomChof'       => ['required', 'string', 'between:4,60'],
            'dDomFisc'       => ['required', 'string', 'between:1,150'],
            'dDirChof'       => ['required', 'string', 'between:1,255'],
        ]);
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'iNatTrans'     => 'Naturaleza del transportista',
            'dNomTrans'     => 'Nombre o razón social del transportista',
            'dRucTrans'     => 'RUC del transportista',
            'dDVTrans'      => 'Dígito verificador del RUC del transportista',
            'iTipIDTrans'   => 'Tipo de documento de identidad del transportista',
            'dDTipIDTrans'  => 'Descripción del tipo de documento de identidad del transportista',
            'dNumIDTrans'   => 'Número de documento de identidad del transportista',
            'dNumIDChof'    => 'Número de documento de identidad del chofer',
            'dNomChof'      => 'Nombre y apellido del chofer',
            'dDomFisc'      => 'Domicilio fiscal del transportista',
            'dDirChof'      => 'Dirección del chofer',
        ]); // TODO: Change the autogenerated stub
    }

    public function setDRucTransAttribute($value)
    {
        $this->attributes['dRucTrans'] = $value;
        $this->dDVTrans = null;
        if ( Str::contains($value, '-')) {
            $values = explode('-', $value);
            $this->attributes['dRucTrans'] = implode('-', array_slice($values, 0, count($values)-1));
            $this->dDVTrans = Arr::last($values);
        }
        // if ( is_null($this->dDVTrans)) $this->dDVTrans = // function calc digito verificador ruc
        // if (strlen($this->attributes['dRucTrans']) === 7) $this->attributes['dRucTrans'] = '8' . $this->attributes['dRucTrans'];
    }

    public function getDDTipIDTransAttribute()
    {
        if( isset($this->attributes['dDTipIDTrans'])) return $this->attributes['dDTipIDTrans'];

        return ( ! is_null($this->iTipIDTrans)) ? Arr::get($this->tipIdTrans, $this->iTipIDTrans) : null;
    }
}