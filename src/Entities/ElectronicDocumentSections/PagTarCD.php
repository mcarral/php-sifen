<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Support\Arr;
use Illuminate\Validation\Rule;

/**
 * Class PagTarCD
 * @property integer iDenTarj
 * @property string dDesDenTarj
 * @property string dRUCproTar
 * @property string dDVerRprT
 * @property integer iForProPa
 * @property string dNunapOpe
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class PagTarCD extends ElectronicDocumentSectionBase {

    protected $attributes = [
        'iDenTarj' => null, 'dDesDenTarj' => null, 'dRSProTar' => null, 'dRUCProTar' => null, 'dDVProTar' => null, 'iForProPa' => null,
        'dCodAuOpe' => null, 'dNomTit' => null, 'dNumTarj' => null,
    ];

    protected $iDenTarjOptions = [
        1 => 'Visa', 2 => 'Mastercard', 3 => 'American Express', 4 => 'Maestro', 5 => 'Panal', 6 => 'Cabal', 99 => 'Otro'
    ];

    public function rules()
    {
        return array_merge(parent::rules(), [
            'iDenTarj'      => ['required', 'digits_between:1,2', Rule::in(array_keys($this->iDenTarjOptions))],
            'dRSProTar'     => ['string', 'between:4,60'],
            'dRUCProTar'    => ['string', 'between:5,8'],
            'dDVProTar'     => ['integer', 'digits:1'],
            'dCodAuOpe'     => ['digits:10'],
            'dNomTit'       => ['string', 'between:4,30'],
            'dNumTarj'      => ['integer', 'digits:4'],
        ]); // TODO: Change the autogenerated stub
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'iDenTarj'      => 'Denominación de la tarjeta',
            'dDesDenTarj'   => 'Descripción de denominación de la tarjeta',
            'dRSProTar'     => 'Razón social de la procesadora de tarjeta',
            'dRUCProTar'    => 'RUC de la procesadora de tarjeta',
            'dDVProTar'     => 'Dígito verificador del RUC de la procesadora de tarjeta',
            'iForProPa'     => 'Forma de procesamiento de pago',
            'dCodAuOpe'     => 'Código de autorización de la operación',
            'dNomTit'       => 'Nombre del titular de la tarjeta',
            'dNumTarj'      => 'Número de la tarjeta',
        ]); // TODO: Change the autogenerated stub
    }

    public function setIDenTarjAttribute($value)
    {
        $equivalence = (! is_null($value)) ? $this->ekuatia->equivalence('CredCardType', $value, $value) : null;
        if ($equivalence) {
//            $value = str_pad($equivalence->code_converted, 2, '0', STR_PAD_LEFT);
            $value = $equivalence->code_converted;
            if ((int) $value === 99) $this->dDesDenTarj = $equivalence->description;
        }
        if (! array_key_exists((int) $value, $this->iDenTarjOptions)) $value = 99;
        $this->attributes['iDenTarj'] = $value;
    }

    public function getDDesDenTarjAttribute()
    {
        if ( isset($this->attributes['dDesDenTarj'])) return $this->attributes['dDesDenTarj'];

        return ( ! is_null($this->iDenTarj)) ? Arr::get($this->iDenTarjOptions, (int) $this->iDenTarj) : null;
    }

    public function setDNumTarjAttribute($value)
    {
        if (! is_null($value)) $value = substr($value, mb_strlen($value)-4, mb_strlen($value));
        $this->attributes['dNumTarj'] = $value;
    }

    public function setDCodAuOpeAttribute($value)
    {
        if (! is_null($value)) $value = str_pad($value, 10, '0', STR_PAD_LEFT);
        $this->attributes['dCodAuOpe'] = $value;
    }
}