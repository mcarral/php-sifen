<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Support\Arr;
use Illuminate\Support\Str;

/**
 * Class DatRec
 * @property int iNatRec
 * @property string dDesNatRe
 * @property int iTiOpe
 * @property string dDesTiope
 * @property string cPaisRec
 * @property string dDesPaisRe
 * @property string dRucRec
 * @property int dDVRec
 * @property int iTiContRec
 * @property string dDtiContRec
 * @property string dNomRec
 * @property string dNomFanRec
 * @property string dNomFan
 * @property string dTelRec
 * @property string dCelRec
 * @property string dEmailRec
 * @property int iTipIDRec
 * @property string dDTipIDRec
 * @property string dNumIDRec
 * @property string dDirRec
 * @property integer dNumCasRec
 * @property string dCodCliente
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class DatRec extends ElectronicDocumentSectionBase {

    protected $attributes = [
        'iNatRec' => null, 'iTiOpe' => null, 'cPaisRec' => null, 'dDesPaisRe' => null, 'iTiContRec' => null,
        'dRucRec' => null, 'dDVRec' => null, 'iTipIDRec' => null, 'dDTipIDRec' => null, 'dNumIDRec' => null,
        'dNomRec' => null, 'dNomFanRec' => null, 'dDirRec' => null, 'dNumCasRec' => null, 'dTelRec' => null,
        'dCelRec' => null, 'dEmailRec' => null, 'dCodCliente' => null,
    ];

    protected $fillable = [
        'iNatRec', 'iTiOpe', 'cPaisRec', 'iTiContRec', 'dRucRec', 'iTipIDRec', 'dNomRec', 'dNomFanRec', 'dTelRec',
        'dEmailRec', 'dCodCliente', 'dNumIDRec', 'dDirRec', 'dNumCasRec', 'dCelRec',
    ];

    const NAT_RE_TAXPAYER = 1;
    const NAT_RE_NOT_TAXPAYER = 2;

    const PERSON_PHYSICAL = 1;
    const PERSON_LEGAL = 2;

    const B2B = 1;
    const B2C = 2;
    const B2G = 3;
    const B2F = 4;

    public function rules()
    {
        return array_merge(parent::rules(), [
            'iNatRec'       => ['required', 'integer', 'digits:1'],
            'iTiOpe'        => ['required', 'integer', 'digits:1'],
            'cPaisRec'      => ['required', 'string', 'size:3'],
            'dDesPaisRe'    => ['required', 'string', 'between:3,30'],
            'iTiContRec'    => ['required_if:iNatRec,1', 'integer', 'digits:1'],
            'dRucRec'       => ['required_if:iNatRec,1', 'string', 'between:3,8', 'regex:/[1-9][0-9]*[0-9A-D]?/i'],
            'dDVRec'        => ['required_with:dRucRec', 'integer', 'digits:1'],
            'iTipIDRec'     => ['required_if:iNatRec,2', 'integer', 'digits:1'],
            'dDTipIDRec'    => ['required_with:iTipIDRec', 'string', 'between:9,41'],
            'dNumIDRec'     => ['required_if:iNatRec,2', 'string', 'between:1,20', 'regex:/[0-9]{1,20}/i'],
            'dNomRec'       => ['required', 'string', 'between:4,255'],
            'dNomFanRec'    => ['string', 'between:4,255'],
            'dDirRec'       => ['string', 'between:1,255'],
            'dNumCasRec'    => ['required_with:dDirRec', 'integer', 'digits_between:1,6'],
            'dTelRec'       => ['string', 'between:8,15', 'regex:/\d{8,15}/i'],
            'dCelRec'       => ['string', 'between:10,20', 'regex:/\d{10,20}/i'],
            'dEmailRec'     => ['string', 'between:3,80', 'regex:/([0-9a-zA-Z#$%]([-.\w]*[0-9a-zA-Z#$%\'\\.\\-_])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})/i'],
            'dCodCliente'   => ['string', 'between:3,15'],
        ]); // TODO: Change the autogenerated stub
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'iNatRec'       => 'Naturaleza del receptor',
            'iTiOpe'        => 'Tipo de operación',
            'cPaisRec'      => 'Código de país del receptor',
            'dDesPaisRe'    => 'Descripción del país receptor',
            'iTiContRec'    => 'Tipo de contribuyente receptor',
            'dRucRec'       => 'RUC del receptor',
            'dDVRec'        => 'Dígito verificador del RUC del receptor',
            'iTipIDRec'     => 'Tipo de documento de identidad del receptor',
            'dDTipIDRec'    => 'Descripción del tipo de documento de identidad',
            'dNumIDRec'     => 'Número de documento de identidad',
            'dNomRec'       => 'Nombre o razón social del receptor del DE',
            'dNomFanRec'    => 'Nombre de fantasía',
            'dDirRec'       => 'Dirección del receptor',
            'dNumCasRec'    => 'Número de casa del receptor',
            'dTelRec'       => 'Número de teléfono del receptor',
            'dCelRec'       => 'Número de celular del receptor',
            'dEmailRec'     => 'Correo electrónico del receptor',
            'dCodCliente'   => 'Código del cliente',
        ]); // TODO: Change the autogenerated stub
    }

    public function setDRucRecAttribute($value)
    {
        $this->attributes['dRucRec'] = $value;
        $this->dDVRec = null;
        if ( Str::contains($value, '-')) {
            $values = explode('-', $value);
            $this->attributes['dRucRec'] = implode('-', array_slice($values, 0, count($values)-1));
            $this->dDVRec = Arr::last($values);
        }
    }

    public function setDNomFanRecAttribute($value)
    {
        $this->attributes['dNomFanRec'] = $value ? trim($value) : null;
    }

    public function getDDesNatReAttribute()
    {
        if( isset($this->attributes['dDesNatRe'])) return $this->attributes['dDesNatRe'];

        return ( ! is_null($this->iNatRec)) ? Arr::get([
            DatRec::NAT_RE_TAXPAYER => "contribuyente", DatRec::NAT_RE_NOT_TAXPAYER => "no contribuyente"
        ], $this->iNatRec) : null;
    }

    public function getDDesTiopeAttribute()
    {
        if( isset($this->attributes['dDesTiope'])) return $this->attributes['dDesTiope'];

        return ( ! is_null($this->iTiOpe)) ? Arr::get([DatRec::B2B => "B2B", DatRec::B2C => "B2C", DatRec::B2G => "B2G", DatRec::B2F => "B2F"], $this->iTiOpe) : null;
    }

    public function setCPaisRecAttribute($value)
    {
        if ($value) $value = $this->ekuatia->equivalence('Country', $value, $value)->code_converted;
        $this->attributes['cPaisRec'] = $value;
    }

    public function getDDesPaisReAttribute()
    {
        if( isset($this->attributes['dDesPaisRe'])) return $this->attributes['dDesPaisRe'];

        $equivalence = (! is_null($this->cPaisRec)) ? $this->ekuatia->equivalence('Country', $this->cPaisRec, null, true) : null;
        if ($equivalence and $equivalence->description) return $equivalence->description;

        return ( ! is_null($this->cPaisRec)) ? Arr::get($this->ekuatia->config('encodings.countries'), $this->cPaisRec) : null;
    }

    public function getDDtiContRecAttribute()
    {
        if( isset($this->attributes['dDtiContRec'])) return $this->attributes['dDtiContRec'];

        return ( ! is_null($this->iTiContRec)) ? Arr::get([DatRec::PERSON_PHYSICAL => "Persona Fisica", DatRec::PERSON_LEGAL => "Persona Juridica"], $this->iTiContRec) : null;
    }

    public function getDDTipIDRecAttribute()
    {
        if( isset($this->attributes['dDTipIDRec'])) return $this->attributes['dDTipIDRec'];

        return ( ! is_null($this->iTipIDRec)) ? Arr::get([
            1 => "Cédula paraguaya", 2 => "Pasaporte", 3 => "Cédula extranjera", 4 => "Carnet de residencia",
            5 => "Innominado", 6 => "Tarjeta Diplomática de exoneración fiscal"
        ], $this->iTipIDRec) : null;
    }

    public function getDNumIDRecAttribute()
    {
        if ($this->iTipIDRec == 5) return '0';
        $val = Arr::get($this->attributes, 'dNumIDRec');
        if ($this->iTipIDRec != 1) return $val;
        if ($val) return filter_var($val, FILTER_SANITIZE_NUMBER_INT);

        return $val;
    }

    public function getDNomRecAttribute()
    {
        if ((string) $this->dNumIDRec === '0') return "Sin Nombre";

        return Arr::get($this->attributes, 'dNomRec');
    }

    public function setDTelRecAttribute($value)
    {
        $this->attributes['dTelRec'] = $this->extractPhoneNumber($value);
    }

    public function setDCelRecAttribute($value)
    {
        $this->attributes['dCelRec'] = $this->extractPhoneNumber($value);
    }

    public function getDCodClienteAttribute()
    {
        $value = Arr::get($this->attributes, 'dCodCliente');

        return ( is_null($value)) ? $value : str_pad($value, 3, '0', STR_PAD_LEFT);
    }

    public function toArray()
    {
        $attributes = parent::toArray();
        if ( $this->iNatRec === DatRec::NAT_RE_TAXPAYER) {
            $attributes = Arr::except($attributes, ['iTipIDRec', 'dDTipIDRec', 'dNumIDRec']);
        } elseif($this->iNatRec === DatRec::NAT_RE_NOT_TAXPAYER) {
            $attributes = Arr::except($attributes, ['iTiContRec', 'dRucRec', 'dDVRec']);
        }

        return $attributes;
    }
}
