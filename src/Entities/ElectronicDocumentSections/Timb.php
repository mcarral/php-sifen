<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;
use Mcarral\Sifen\Ekuatia;

/**
 * Class DTim
 * @property int iTiDE
 * @property string dDesTiDE
 * @property int dNumTim
 * @property int dEst
 * @property int dPunExp
 * @property int dNumDoc
 * @property string dFeIniT
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class Timb extends ElectronicDocumentSectionBase {

    protected $attributes = [
        'iTiDE' => null, 'dDesTiDE' => null, 'dNumTim' => null, 'dEst' => null, 'dPunExp' => null, 'dNumDoc' => null,
        'dFeIniT' => null,
    ];

    protected $fillable = ['iTiDE', 'dDesTiDE', 'dNumTim', 'dEst', 'dPunExp', 'dNumDoc', 'dFeIniT'];

    static protected $typeDocuments;

    public function defaults()
    {
        // TODO DEFAULTS VALUES
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            'iTiDE'     => ['required', 'regex:/[0-9]+/', 'between:1,2', Rule::in(array_keys(static::getTypeDocuments()))],   // Tipo de Documento Electrónico
            'dDesTiDE'  => ['required', 'string', 'between:2,50', Rule::in(static::getTypeDocuments())],                      // Descripción del tipo de documento electrónico
            'dNumTim'   => ['required', 'integer', 'digits:8'],                                                               // Número del Timbrado
            'dEst'      => ['required', 'numeric', 'digits:3'],                                                               // Establecimiento
            'dPunExp'   => ['required', 'numeric', 'digits:3'],                                                               // Punto de Expedición
            'dNumDoc'   => ['required', 'numeric', 'digits:7'],                                                               // Número del documento
            'dFeIniT'   => ['required', 'string', 'date_format:' . Timb::DATE_FORMAT],                                        // Fecha inicio de vigencia del Timbrado
        ];
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'iTiDE'     => 'Tipo de Documento Electrónico',
            'dDesTiDE'  => 'Descripción del tipo de documento electrónico',
            'dNumTim'   => 'Número del timbrado',
            'dEst'      => 'Establecimiento',
            'dPunExp'   => 'Punto de expedición',
            'dNumDoc'   => 'Número del documento',
            'dFeIniT'   => 'Fecha inicio de vigencia del timbrado',
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @param Validator $validator
     */
    public function validating(Validator $validator)
    {
        //
    }

    public function setDEstAttribute($value)
    {
        if ($value) $value = str_pad($value, 3, '0', STR_PAD_LEFT);
        $this->attributes['dEst'] = $value;

        return $value;
    }

    public function setDPunExpAttribute($value)
    {
        if ($value) $value = str_pad($value, 3, '0', STR_PAD_LEFT);
        $this->attributes['dPunExp'] = $value;

        return $value;
    }

    public function setDNumDocAttribute($value)
    {
        if ( strlen($value) > 7) $value = substr($value, strlen($value)-7, strlen($value));
        if ( strlen($value) < 7) $value = str_pad($value, 7, '0', STR_PAD_LEFT);

        $this->attributes['dNumDoc'] = $value;

        return $value;
    }

    public function getDNumTimAttribute()
    {
        $value = Arr::get($this->attributes, 'dNumTim');
        if ($this->ekuatia->env() !== 2) return $value;
        $confv = $this->ekuatia->config('test.num-timb');

        return (! is_null($confv)) ? $confv : $value;
    }

    public function getDFeIniTAttribute()
    {
        return (isset($this->attributes['dFeIniT'])) ? $this->dateToString($this->attributes['dFeIniT']) : '';
    }

    public function setITiDEAttribute($value)
    {
        $this->attributes['iTiDE'] = $value;
    }

    public function getDDesTiDEAttribute()
    {
        return (! is_null($this->iTiDE)) ? Arr::get(static::getTypeDocuments(), (int) $this->iTiDE) : '';
    }

    /**
     * @return array
     */
    public static function getTypeDocuments()
    {
        if (static::$typeDocuments) return static::$typeDocuments;

        return static::$typeDocuments = [
            1 => "Factura electrónica" ,   2 => "Factura electrónica de exportación",
            3 => "Factura electrónica de importación",     4 => "Autofactura electrónica",
            5 => "Nota de crédito electrónica", 6 => "Nota de débito electrónica", 7 => "Nota de remisión electrónica",
            8 => "Comprobante de retención electrónico"
        ];
    }

    public function toArray()
    {
        return array_merge(parent::toArray(), [
            'dDesTiDE' => $this->dDesTiDE,
        ]);
    }

}