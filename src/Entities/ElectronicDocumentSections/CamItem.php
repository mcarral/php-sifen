<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentSections;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Support\Arr;
use Illuminate\Validation\Rule;

/**
 * @property string dCodInt
 * @property string dDesProSer
 * @property string cUniMed
 * @property string dDesUniMed
 * @property string dCantProSer
 * @property string cPaisOrig
 * @property string dDesPaisOrig
 * @property string dInfItem
 * @property ValorItem gValorItem
 * @property CamIVA gCamIVA
 * @property CamISC gCamISC
 * Class CamItem
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class CamItem extends ElectronicDocumentSectionBase {

    protected $attributes = ['dCodInt' => null, 'dDesProSer' => null, 'cUniMed' => null, 'dDesUniMed' => null,
                             'dCantProSer' => null, 'cPaisOrig' => null, 'dDesPaisOrig' => null, 'dInfItem' => null,
                             'gValorItem' => null, 'gCamIVA' => null, 'gCamISC' => null];

    protected $occurrences = 999;

    public function rules()
    {
        return array_merge(parent::rules(), [
            'dCodInt'       => ['required', 'string', 'between:1,60'],
            'dDesProSer'    => ['required', 'string', 'between:1,120'],
            'cUniMed'       => ['required', ['regex', '/[0-9]+/'], 'between:1,5', Rule::in(array_keys($this->ekuatia->config('encodings.measurement_unities')))],
            'dDesUniMed'    => ['required', 'string', 'between:1,30'],
            'dCantProSer'   => ['required', 'numeric', 'ekuatia_long:1-10p0-4'],
            'dInfItem'      => ['string', 'between:1,500'],
            'gValorItem'    => 'required_unless:gTimiTiDE,5,7',
        ]);
    }

    protected function validateAdditionalData()
    {
        return array_merge(parent::validateAdditionalData(), [
            'gTimiTiDE' => $this->root->gTimb->iTiDE
        ]); // TODO: Change the autogenerated stub
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'dCodInt'       => 'Código interno',
            'dDesProSer'    => 'Descripción del producto y/o servicio',
            'cUniMed'       => 'Unidad de Medida',
            'dDesUniMed'    => 'Descripción de la unidad de medida',
            'dCantProSer'   => 'Cantidad del producto y/o servicio',
            'gValorItem'    => 'Campos que describen los precios, descuentos y valor total por ítem',
        ]); // TODO: Change the autogenerated stub
    }

    protected function validating(Validator $validator)
    {
        if ($this->root->gDatGralOpe->gDatRec->iTiOpe === 3) {
            if (! array_key_exists($this->cUniMed, $this->ekuatia->config('encodings.measurement_unities'))) {
                $validator->getMessageBag()->add('cUniMed', 'cUniMed (' . $this->cUniMed . ') no se encuentra en la tabla codificada de unidad de medida.');
            }
        }
    }

    public function getDDesProSerAttribute()
    {
        if ($this->ekuatia->env() === 2) return "DOCUMENTO ELECTRÓNICO SIN VALOR COMERCIAL NI FISCAL - GENERADO EN AMBIENTE DE PRUEBA";

        return \Str::substr(Arr::get($this->attributes, 'dDesProSer', ''), 0, 200);
    }

    public function setDDesProSerAttribute($value)
    {
        $value = substr($value, 0, 120);
        $this->attributes['dDesProSer'] = $value;

        return $value;
    }

    public function setCUniMedAttribute($value)
    {
        if ( is_null($value) or $value === "") return;
        $equivalence = $this->ekuatia->equivalence('Unit', $value, $value);
        $this->attributes['cUniMed'] = $equivalence->code_converted;
//        if ($equivalence->description) $this->attributes['dDesUniMed'] = $equivalence->description;
    }

    public function getDDesUniMedAttribute()
    {
        if ( isset($this->attributes['dDesUniMed'])) return $this->attributes['dDesUniMed'];

        return Arr::get($this->ekuatia->config('encodings.measurement_unities'), $this->cUniMed . '.0', 'Unknown');
    }

    public function setDCantProSerAttribute($value)
    {
        $this->attributes['dCantProSer'] = is_null($value) ? $value : abs($value);
    }

    public function getDCantProSerAttribute()
    {
        return ! is_null($this->attributes['dCantProSer']) ? ekuatia_number_format($this->attributes['dCantProSer'], 4) : null;
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $attributes = array_merge(parent::toArray(), [
            'gValorItem' => $this->gValorItem,
            'gCamIVA' => $this->gCamIVA,
        ]);
        if ($this->root->gTimb->iTiDE === 7) $attributes = Arr::except($attributes, ['gValorItem']);
        if ($this->root->gDatGralOpe->gOpeCom->iTImp !== 2 or ! in_array($this->root->gTimb->iTiDE, [1, 3])) {
            $attributes = Arr::except($attributes, ['gCamISC']);
        }
        if ( in_array($this->root->gTimb->iTiDE, [4, 7])) $attributes = Arr::except($attributes, ['gCamIVA']);

        return $attributes;
    }

}
