<?php

namespace Mcarral\Sifen\Entities\ElectronicDocumentEventSections;

use Illuminate\Validation\Rule;
use Mcarral\Sifen\Entities\ElectronicDocumentSections\Timb;

/**
 * Class EventDisabled
 * @property int dNumTim
 * @property int dEst
 * @property int dPunExp
 * @property int dNumIn
 * @property int dNumFin
 * @property int iTiDE
 * @property string mOtEve
 * @package Mcarral\Sifen\Entities\ElectronicDocumentSections
 */
class EventDisabled extends EventBase {

    protected $attributes = [
        'dNumTim' => null, 'dEst' => null, 'dPunExp' => null, 'dNumIn' => null, 'dNumFin' => null, 'iTiDE' => null,
        'mOtEve' => null,
    ];

    protected $fillable = ['dNumTim', 'dEst', 'dPunExp', 'dNumIn', 'dNumFin', 'iTiDE', 'mOtEve'];

    public function defaults()
    {
        parent::defaults(); // TODO: Change the autogenerated stub
        $this->iTiDE = 1;
    }

    public function sectionName()
    {
        return 'rGeVeInu';
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            'dNumTim'   => ['required', 'numeric', 'digits:8'],
            'dEst'      => ['required', 'string', 'size:3'],
            'dPunExp'   => ['required', 'string', 'size:3'],
            'dNumIn'    => ['required', 'string', 'size:7'],
            'dNumFin'   => ['required', 'string', 'size:7'],
            'iTiDE'     => ['required', 'integer', 'digits_between:1,2', Rule::in(array_keys(Timb::getTypeDocuments()))],
            'mOtEve'    => ['required', 'string', 'between:5,150'],
        ]); // TODO: Change the autogenerated stub
    }

    public function rulesAttributes()
    {
        return array_merge(parent::rulesAttributes(), [
            'dNumTim'   => 'Número del Timbrado',
            'dEst'      => 'Establecimiento',
            'dPunExp'   => 'Punto de expedición',
            'dNumIn'    => 'Número Inicio del rango del documento',
            'dNumFin'   => 'Número Final del rango del documento',
            'iTiDE'     => 'Tipo de Documento Electrónico',
            'mOtEve'    => 'Motivo del Evento',
        ]); // TODO: Change the autogenerated stub
    }

    public function setDEstAttribute($value)
    {
        if ($value) $value = str_pad($value, 3, '0', STR_PAD_LEFT);
        $this->attributes['dEst'] = $value;

        return $value;
    }

    public function setDPunExpAttribute($value)
    {
        if ($value) $value = str_pad($value, 3, '0', STR_PAD_LEFT);
        $this->attributes['dPunExp'] = $value;

        return $value;
    }

    public function setDNumInAttribute($value)
    {
        if ( ! is_null($value)) $value = str_pad($value, 7, '0', STR_PAD_LEFT);
        $this->attributes['dNumIn'] = $value;
    }

    public function setDNumFinAttribute($value)
    {
        if ( ! is_null($value)) $value = str_pad($value, 7, '0', STR_PAD_LEFT);
        $this->attributes['dNumFin'] = $value;
    }

    public function schema()
    {
        return 'RecEventoInu';
    }
}