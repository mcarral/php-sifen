<?php

namespace Mcarral\Sifen\Sifen;

use Illuminate\Support\MessageBag;
use Illuminate\Config\Repository as Config;
use Illuminate\Support\Str;

class ReceiveEvent extends ReceiveBase {

    static public $EVENT_DISABLED = 'disabled'; // manual 11.1.1.
    static public $EVENT_CANCELED = 'canceled'; // manual 11.1.2.
    static public $SUCCESS_CODES = ['0600'];

    public function getSuccessCodes()
    {
        return static::$SUCCESS_CODES;
    }

    /**
     * @param $eventName
     * @param $delivery
     * @return null
     */
    static public function newInstanceFromName($eventName, $delivery)
    {
        $className = __NAMESPACE__ . "\ReceiveEvent" . Str::studly($eventName);
        if ( ! class_exists($className)) return null;

        return new $className($delivery);
    }

    protected function responseToMessage(\Illuminate\Contracts\Support\MessageBag $message, Config $response, $baseKey = 'gResProcEVe.gResProc', $codeRes = 'dCodRes', $msgRes = 'dMsgRes')
    {
        return parent::responseToMessage($message, $response, $baseKey); // TODO: Change the autogenerated stub
    }

    /**
     * @param \soap_server $server
     * @return array
     */
    public static function structure(\soap_server $server)
    {
        return [
            ['name'     => 'xsd:string'],
            ['return'   => 'xsd:string']
        ];
    }

    /**
     * @return string
     */
    public function xsdUrl()
    {
        return 'xsd/siRecepEvento_v' . $this->ekuatia->version() . '.xsd';
    }

    public function toSifen()
    {
        $this->request('rEnviEventoDe', $this->ekuatia->config('soap.wsdls.de.receipt-event'), [
            'dId' => $this->delivery->id,
            'dEvReg' => new \SoapVar('<xsd:dEvReg>' . $this->delivery->event->xml->asXmlWithoutHeader() . '</xsd:dEvReg>', \XSD_ANYXML)
        ], function(Config $response) {
            if (! in_array($response->get('gResProcEVe.gResProc.dCodRes'), $this->getSuccessCodes())) {
                $message = new MessageBag();
                $message = $this->responseToMessage($message, $response);
                throw \Illuminate\Validation\ValidationException::withMessages($message->toArray());
            }

            $this->delivery->sifen_message = $this->responseToMessage($this->delivery->sifen_message, $response);
            $this->delivery->event->approved = true;
            $this->delivery->event->save();
        });
    }

    public function toConsumer()
    {

    }
}